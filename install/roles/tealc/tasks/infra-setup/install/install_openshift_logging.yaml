---
#- name: Create logging namespace on Infra cluster
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    name: "{{ openshift_logging_namespace }}"
#    api_version: v1
#    kind: Namespace
#    verify_ssl: no
#    state: present
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Create logging namespace on Worker clusters
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ worker.value.name }}"
#    name: "{{ openshift_logging_namespace }}"
#    api_version: v1
#    kind: Namespace
#    verify_ssl: no
#    state: present
#  loop: "{{ workers | dict2items }}"
#  loop_control:
#    loop_var: worker
#
#- name: Create OpenShift Logging operator group and subscription on Infra cluster
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    state: present
#    verify_ssl: no
#    template: "{{ item }}"
#  loop:
#    - templates/logging/install/operator-group.yaml.j2
#    - templates/logging/install/openshift-logging-subscription.yaml.j2
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Create OpenShift Elastic operator group and subscription on Infra cluster
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "openshift-operators-redhat"
#    state: present
#    verify_ssl: no
#    template: "{{ item }}"
#  loop:
#    - templates/logging/install/openshift-elastic-subscription.yaml.j2
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Create OpenShift Logging operator group and subscription on Worker clusters
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ item[0].value.name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    state: present
#    verify_ssl: no
#    template: "{{ item[1] }}"
#  with_nested:
#    - "{{ workers | dict2items }}"
#    - [ templates/logging/install/operator-group.yaml.j2, templates/logging/install/openshift-logging-subscription.yaml.j2 ]
#
#- name: Sleep for 60 seconds and continue with play
#  wait_for:
#    timeout: 60
#
#- name: Wait for OpenShift logging operator on Infra cluster
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    kind: Deployment
#    name: cluster-logging-operator
#    wait: true
#    verify_ssl: no
#    wait_condition:
#      type: Available
#      status: True
#      reason: MinimumReplicasAvailable
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Wait for OpenShift logging operator on Worker clusters
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ worker.value.name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    kind: Deployment
#    name: cluster-logging-operator
#    wait: true
#    verify_ssl: no
#    wait_condition:
#      type: Available
#      status: True
#      reason: MinimumReplicasAvailable
#  loop: "{{ workers | dict2items }}"
#  loop_control:
#    loop_var: worker
#
#- name: Create ClusterLogging instance on Infra cluster
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    state: present
#    verify_ssl: no
#    template: templates/logging/install/cluster-logging-instance.yaml.j2
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Sleep for 60 seconds and continue with play
#  wait_for:
#    timeout: 60
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Wait for Kibana deployment on Infra cluster
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    kind: Deployment
#    name: kibana
#    wait: true
#    verify_ssl: no
#    wait_condition:
#      type: Available
#      status: True
#      reason: MinimumReplicasAvailable
#  when:
#    - '"admin-access" in ansible_run_tags'

- name: Add admin-ca to variable
  shell: "oc get secret elasticsearch -n {{ openshift_logging_namespace }} -o=jsonpath='{.data.admin-ca}' | base64 -d"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: "admin_ca"

- debug:
    msg: "{{ admin_ca }}"

#- name: Expose Elasticsearch via route
#  kubernetes.core.k8s:
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    apply: true
#    state: present
#    verify_ssl: no
#    template: templates/logging/install/elastic-route.yaml.j2
#  vars:
#    certificate: "{{ admin_ca.stdout }}"
#  when:
#    - '"admin-access" in ansible_run_tags'
#
#- name: Expose Elasticsearch via route
#  kubernetes.core.k8s:
#    state: present
#    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
#    namespace: "{{ openshift_logging_namespace }}"
#    apply: true
#    definition:
#      apiVersion: v1
#      kind: Route
#      type: Opaque
#      metadata:
#        name: "elasticsearch"
#      spec:
#        tls:
#          termination: reencrypt
#          destinationCACertificate: |
#            "{{ admin_ca.stdout | replace('\"','') }}"
#        to:
#          kind: Service
#          name: elasticsearch
#


- name: Add bundle-ca to variable
  shell: "oc get secret elasticsearch -n {{ openshift_logging_namespace }} -o=jsonpath='{.data.admin-cert}' | base64 -d"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: "secret_data"

- name: Add bundle-ca final secret
  set_fact:
    elastic_secret: "{{ elastic_secret | default({})  | combine({item.key: item.value}) }}"
  with_items:
    - { key: 'ca',value: "{{ secret_data.stdout }}" }

- name: Add tls.crt to variable
  shell: "oc get secret elasticsearch -n {{ openshift_logging_namespace }} -o=jsonpath='{.data.logging-es\\.crt}' | base64 -d"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: "secret_data"

- name: Add tls.crt to final secret
  set_fact:
    elastic_secret: "{{ elastic_secret | default({})  | combine({item.key: item.value}) }}"
  with_items:
    - { key: 'cert',value: "{{ secret_data.stdout }}" }

- name: Add tls.key to variable
  shell: "oc get secret elasticsearch -n {{ openshift_logging_namespace }} -o=jsonpath='{.data.logging-es\\.key}' | base64 -d"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: "secret_data"

- name: Add tls.key to final secret
  set_fact:
    elastic_secret: "{{ elastic_secret | default({})  | combine({item.key: item.value}) }}"
  with_items:
    - { key: 'key',value: "{{ secret_data.stdout }}" }

- name: Create elastic access secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig_path }}/{{ worker.value.name }}"
    namespace: "{{ openshift_logging_namespace }}"
    apply: true
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "collector"
      data:
        tls.crt: "{{ elastic_secret.cert | b64encode }}"
        tls.key: "{{ elastic_secret.key | b64encode }}"
        ca-bundle.crt: "{{ elastic_secret.ca | b64encode }}"
#        username: "{{ 'kubedamin' | b64encode }}"
#        password: "{{ 'pxqZF-KyRxs-WhXIx-HYU4F' | b64encode }}"
  loop: "{{ workers | dict2items }}"
  loop_control:
    loop_var: worker

