---
- name: Create monitoring namespace on Infra cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    state: present
    verify_ssl: no
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ infra_monitoring_namespace }}"
        labels:
          'argocd.argoproj.io/managed-by': "{{ infra_argo_namespace }}"
          project: "tealc"

- name: Enable & configure user-workload on infra cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    state: present
    apply: true
    template: "{{ item }}"
    verify_ssl: no
  vars:
    clusterName: "{{ infra_context_name }}"
  loop:
    - templates/cluster-monitoring-cm.yaml.j2
    - templates/user-workload-monitoring-cm.yaml.j2


- name: Create monitoring namespace on worker clusters
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ worker.name }}"
    name: "{{ worker.monitoring_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
    verify_ssl: no
  loop: "{{ clusters_dict.values() }}"
  loop_control:
    loop_var: worker

- name: Enable user-workload on worker cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ worker.name }}"
    namespace: "openshift-monitoring"
    state: present
    apply: true
    template: templates/cluster-monitoring-cm.yaml.j2
    verify_ssl: no
  vars:
    clusterName: "{{ worker.name }}"
  loop: "{{ clusters_dict.values() }}"
  loop_control:
    loop_var: worker

- name: Configure user-workload on worker cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ worker.name }}"
    state: present
    apply: true
    template: templates/user-workload-monitoring-cm.yaml.j2
    verify_ssl: no
  vars:
    clusterName: "{{ worker.name }}"
  loop: "{{ clusters_dict.values() }}"
  loop_control:
    loop_var: worker

- name: Sleep for 10 seconds and continue with play
  wait_for:
    timeout: 10

- name: Setup Grafana access on Infra cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    namespace: "{{ infra_monitoring_namespace }}"
    state: present
    apply: true
    template: templates/grafana/grafana-setup.yaml.j2
    verify_ssl: no

- name: Setup Grafana access on Worker clusters
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ cluster.name }}"
    namespace: "{{ cluster.monitoring_namespace }}"
    state: present
    template: templates/grafana/grafana-setup.yaml.j2
    verify_ssl: no
    apply: true
  loop: "{{ clusters_dict.values() }}"
  loop_control:
    loop_var: cluster

- name: Install Grafana operator on Infra cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    namespace: "{{ infra_monitoring_namespace }}"
    state: present
    template: templates/grafana/grafana-operator.yaml.j2
    verify_ssl: no
    apply: true

- name: Sleep for 5 seconds and continue with play
  wait_for:
    timeout: 5

- name: Wait for Grafana operator on Infra cluster
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    namespace: "{{ infra_monitoring_namespace }}"
    kind: Deployment
    name: grafana-operator-controller-manager
    wait: true
    verify_ssl: no
    wait_condition:
      type: Available
      status: True
      reason: MinimumReplicasAvailable

- name: Deploy Grafana instance on Infra cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    namespace: "{{ infra_monitoring_namespace }}"
    state: present
    apply: true
    template: templates/grafana/grafana.yaml.j2
    verify_ssl: no

- name: Create data-sources on Infra cluster for worker clusters
  include_tasks: deploy-data-source.yaml
  loop: "{{ clusters_dict.values() }}"
  loop_control:
    loop_var: cluster
  vars:
    is_worker: True
    sa_name: "{{ cluster.name }}-grafana"
    url: "https://thanos-querier-openshift-monitoring.apps.{{ cluster.name }}.{{ cluster_domain }}:443"

- name: Create data-sources on Infra cluster for Infra data
  include_tasks: deploy-data-source.yaml
  loop:
    - {name: "{{ infra_context_name }}",
       sa_namespace: "{{ infra_user_namespace }}",
       monitoring_namespace: "{{ infra_monitoring_namespace }}",
       target_cluster_name: "{{ infra_context_name }}",
       context: "{{ infra_context_name }}",
       url: "https://thanos-querier.openshift-monitoring.svc.cluster.local:9091"}
    - {name: "tealc-thanos",
       sa_namespace: "{{ infra_user_namespace }}",
       monitoring_namespace: "{{ infra_monitoring_namespace }}",
       target_cluster_name: "{{ infra_context_name }}",
       context: "{{ infra_context_name }}",
       url: "http://observability-thanos-query.open-cluster-management-observability.svc.cluster.local:9090"}
  loop_control:
    loop_var: cluster
  vars:
    sa_name: "tealc-sa"

- name: Configure Alertmanager to for sending alerts on Infra cluster from all clusters
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    state: present
    verify_ssl: no
    apply: true
    template: templates/acm/09-alert-manager-configuration.yaml.j2
  vars:
    clusterName: "{{ infra_context_name }}"
    namespace: "{{ item.namespace }}"
    suffix: "{{ item.suffix }}"
    receiver: "{{ item.receiver }}"
  loop:
    # Turn off notifications from Thanos alert manager because the one from original monitoring stack is better configured now for user alerts
    - {namespace: "open-cluster-management-observability", suffix: "config", receiver: "default_blackhole"}
    - {namespace: "openshift-monitoring", suffix: "main", receiver: "slack"}

- name: "Configure default Alertmanager to surpass warnings - {{ clusterName }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}/{{ clusterName }}"
    state: present
    verify_ssl: no
    apply: true
    template: templates/acm/09-alert-manager-configuration.yaml.j2
  vars:
    clusterName: "{{ clusterName }}"
    namespace: "openshift-monitoring"
    suffix: "main"
    receiver: "slack"
  loop: "{{ worker_clusters }}"
  loop_control:
    loop_var: clusterName
