# Get cluster URL

- name: "Check if {{ cluster.name }} cluster config exists in {{ hive_namespace }} namespace"
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    namespace: "{{ hive_namespace }}"
    kind: ClusterDeployment
    name: "{{ cluster.name }}"
    verify_ssl: no
  ignore_errors: true
  register: cluster_present

- name: "Wait for ClusterDeployment {{ cluster.name }} readiness"
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}/{{ infra_context_name }}"
    namespace: "{{ hive_namespace }}"
    kind: ClusterDeployment
    name: "{{ cluster.name }}"
    wait: true
    wait_timeout: 5
    verify_ssl: no
    wait_condition:
      type: Provisioned
      status: True
      reason: Provisioned
  when: cluster_present.resources != []
  ignore_errors: true
  register: readiness

- debug:
    msg: "{{ readiness }}"

- name: "Update facts for {{ cluster.name }}"
  ansible.utils.update_fact:
    updates:
      - path: "clusters_dict['{{ cluster.name }}'].exists"
        value: "{{ cluster_present.resources != [] }}"
      - path: "clusters_dict['{{ cluster.name }}'].provisioned"
        value: "{{ readiness.failed == False }}"
  when: cluster_present.resources != []
  register: updated_data_ready

- name: "Update facts for {{ cluster.name }}"
  ansible.utils.update_fact:
    updates:
      - path: "clusters_dict['{{ cluster.name }}'].exists"
        value: "{{ cluster_present.resources != [] }}"
      - path: "clusters_dict['{{ cluster.name }}'].provisioned"
        value: False
  when: cluster_present.resources == []
  register: updated_data_not_ready

- set_fact:
    clusters_dict: "{{ updated_data_not_ready.clusters_dict }}"
  when: updated_data_not_ready.clusters_dict is defined

- set_fact:
    clusters_dict: "{{ updated_data_ready.clusters_dict }}"
  when: updated_data_ready.clusters_dict is defined

- debug:
    msg: "{{ clusters_dict }}"

- name: "Get cluster {{ cluster.name }} API URL"
  shell: "oc get clusterdeployment {{ cluster.name }} -n {{ hive_namespace }} -o=jsonpath='{.status.apiURL}'"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: serverUrl_output
  when: clusters_dict[cluster.name].provisioned

- name: "Get cluster {{ cluster.name }} provisionRef name"
  shell: "oc get clusterdeployment {{ cluster.name }} -n {{ hive_namespace }} -o=jsonpath='{.status.provisionRef.name}'"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: provisionRefName_output
  when: clusters_dict[cluster.name].provisioned

- name: "Extract kubeconfig for cluster {{ cluster.name }}"
  shell: "oc extract secret/{{ provisionRefName_output.stdout }}-admin-kubeconfig -n {{ hive_namespace }} --to=- --keys=kubeconfig"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}/{{ infra_context_name }}"
  register: kubeconfig_output
  when: clusters_dict[cluster.name].provisioned

- name: "Update facts for {{ cluster.name }}"
  ansible.utils.update_fact:
    updates:
      - path: "clusters_dict['{{ cluster.name }}'].serverUrl"
        value: "{{ serverUrl_output.stdout }}"
      - path: "clusters_dict['{{ cluster.name }}'].provisionRefName"
        value: "{{ provisionRefName_output.stdout }}"
  register: updated_data
  when: clusters_dict[cluster.name].provisioned

- set_fact:
    clusters_dict: "{{ updated_data.clusters_dict }}"
  when: clusters_dict[cluster.name].provisioned

- name: Create kubeconfig for {{ cluster.name }}
  copy:
    content: "{{ kubeconfig_output.stdout }}"
    dest: "{{ kubeconfig_path }}/{{ cluster.name }}"
  when: clusters_dict[cluster.name].provisioned

- name: Set proper rights for kubeconfigs on {{ cluster.name }}
  file:
    path: "{{ kubeconfig_path }}/{{ cluster.name }}"
    mode: '0755'
  when: clusters_dict[cluster.name].provisioned
